// SIR Conversational Survey App
// Author: Generated by AI assistant

const sections = [
  {
    id: 'warm',
    title: 'Warm Up & Rapport',
    tips: [
      'Normalize all answers: say “Thank you” not “Good”.',
      'Anchor future language use references (work, gatherings).'
    ],
    questions: [
      { id:'warm_week', q:'Tell me about a normal week for you—work, family, gatherings.', help:'Context & rhythm; note domains and language choices.' },
      { id:'warm_languages', q:'When people in your household talk about important things (health, money, God), what languages do you use?', help:'Early multilingual cues.' }
    ]
  },
  {
    id: 'personal',
    title: 'Personal Scripture Experience',
    tips: [
      'Probe for last concrete instance.',
      'If vague, ask: “Who was there? What happened next?”'
    ],
    questions: [
      { id:'pers_last', q:'Think about the last time you heard or used the Bible in your own language. Tell me the story.', help:'Record time markers and participants.' },
      { id:'pers_gap', q:'If you go many days without hearing or reading it, what usually fills that space instead?', help:'Substitute practices / other language.' },
      { id:'pers_power', q:'A time it felt especially helpful or powerful—what made it so?', help:'Positive value signals.' },
      { id:'pers_skip', q:'A time you had access but chose not to use it—what was going on?', help:'Potential barriers.' }
    ]
  },
  {
    id: 'community',
    title: 'Community & Church Use',
    tips: [
      'Always ground in events respondent attended.',
      'Avoid speculative “others” without story.'
    ],
    questions: [
      { id:'comm_gather', q:'In the church gatherings you attend, what languages show up in different parts? Tell me about last week.', help:'Map functions to languages.' },
      { id:'comm_events', q:'Outside formal services (funerals, weddings, youth), do you hear Scripture in your language? Recent example?', help:'Domain breadth.' },
      { id:'comm_people', q:'Who most often brings out the local language Bible? Who almost never does?', help:'Roles & adoption patterns.' },
      { id:'comm_story', q:'If a visitor asked how common local Scripture use is here, what story would you tell?', help:'Narrative prevalence statement.' }
    ]
  },
  {
    id: 'translation',
    title: 'Translation Experience (T)',
    tips: [
      'Note exact problematic words/phrases.',
      'Capture key term renderings verbatim.'
    ],
    questions: [
      { id:'trans_natural', q:'When you listen to a passage, what parts feel smooth and what parts feel strange? Examples?', help:'Naturalness vs awkwardness.' },
      { id:'trans_comments', q:'Have you heard people complain or joke about the wording? What did they say?', help:'Community attitudes.' },
      { id:'trans_read', q:'(If reading) Describe what happens inside you when you read—where do you slow down?', help:'Processing friction.' },
      { id:'trans_barrier', q:'(If not reading) If you wanted to read it, what would make that hard?', help:'Literacy/orthography barriers.' },
      { id:'trans_retell', q:'[Retell] After hearing a short passage, tell it back in your own words.', help:'Assess comprehension—note omissions.' },
      { id:'trans_terms', q:'What do people say for King / Kingdom / Priest / Prophet / Salvation / Messiah? What does each mean to you?', help:'Key term semantics.' },
      { id:'trans_trust', q:'People sometimes notice who worked on the translation. What kind of people do others say they were?', help:'Trust / acceptance.' }
    ]
  },
  {
    id: 'engagement',
    title: 'Access & Engagement (SE)',
    tips: [
      'Check desire vs logistics.',
      'Differentiate “not interested” from “no way to access”.'
    ],
    questions: [
      { id:'eng_access', q:'If someone today wanted to hear or read Scripture in your language, what could they practically do?', help:'Access pathways.' },
      { id:'eng_forms', q:'Which forms have you actually seen (print, audio, app, video, songs, drama)? Which used most?', help:'Format availability vs use.' },
      { id:'eng_get', q:'Tell me about the last time you saw someone get a copy. Easy or hard?', help:'Acquisition friction.' },
      { id:'eng_obstacles', q:'Are there people who would like it but don’t have it? What gets in the way?', help:'Barriers inventory.' },
      { id:'eng_youth', q:'If a young person wants Bible input, what do they reach for first? Why?', help:'Youth behavior indicator.' },
      { id:'eng_knowledge', q:'Tell me what you know about (choose) Moses / David / Jeremiah / Jonah.', help:'Narrative knowledge level.' },
      { id:'eng_events', q:'Tell me about (choose) Passover / David & Goliath / Daniel & the Lions / Ruth.', help:'Event knowledge.' },
      { id:'eng_help', q:'If you had more of something (teaching, audio, stories, training), what would help people use Scripture more?', help:'Perceived leverage points.' }
    ]
  },
  {
    id: 'spiritual',
    title: 'Spiritual Climate (S)',
    tips: [
      'Listen for affect: curiosity, fear, indifference.',
      'Note social reaction scenarios.'
    ],
    questions: [
      { id:'spir_talk', q:'When people around you talk about knowing God, what feelings do they show? Recent example?', help:'Affective tone.' },
      { id:'spir_react', q:'If a neighbor wanted to follow Jesus more seriously, what reactions would they expect?', help:'Social cost.' },
      { id:'spir_moments', q:'Are there moments when people become more open (crisis, harvest, holidays)? Describe one.', help:'Openness triggers.' },
      { id:'spir_change', q:'Friends who used to be more spiritually hungry—what changed?', help:'Decline factors.' },
      { id:'spir_guidance', q:'If someone new wanted guidance, how quickly could they find someone to walk with them?', help:'Mentor availability.' }
    ]
  },
  {
    id: 'multilingual',
    title: 'Language Choices (M)',
    tips: [
      'Map function -> language -> rationale.',
      'Capture exclusion/inclusion patterns.'
    ],
    questions: [
      { id:'multi_parts', q:'In the last church meeting, list parts and what language each used.', help:'Functional distribution.' },
      { id:'multi_reasons', q:'Why do leaders choose those languages? What reasons do they give?', help:'Rationale depth.' },
      { id:'multi_leftout', q:'When a passage is in another language, who seems left out?', help:'Impact of language choice.' },
      { id:'multi_impact', q:'If leaders wanted more impact among elders / youth / women, which language would help and why?', help:'Strategic alternative.' },
      { id:'multi_proficiency', q:'Do leaders speak your local language well enough to use it naturally? Tell me about one leader.', help:'Leader capability.' },
      { id:'multi_change', q:'Have people discussed changing languages used? What happened?', help:'Change dynamics.' }
    ]
  },
  {
    id: 'wrap',
    title: 'Wrap-Up & Reflection',
    tips: [
      'Prioritize single most impactful change.',
      'Check for “everything fine” narrative.'
    ],
    questions: [
      { id:'wrap_change', q:'If you could change one thing tomorrow to help people use Scripture in your language more, what would it be?', help:'Perceived leverage point.' },
      { id:'wrap_missing', q:'Is there anything important we haven’t talked about?', help:'Uncovered themes.' },
      { id:'wrap_fine', q:'Do some people feel no need for changes? Why might they feel everything is already fine?', help:'NI condition signals.' }
    ]
  }
];

// Category flag definitions for auto assessment scanning
const categoryKeywords = {
  T: ['dialect','unnatural','hard to understand','strange','wrong word','not clear','outdated','old version','cannot read','orthography','need revise'],
  SE: ['no copy','cannot get','expensive','cost','device','app','audio','distribution','not available','need training','no awareness'],
  S: ['not interested','fear','persecution','afraid','no desire','no hunger','pressure','family oppose','resist','reject'],
  M: ['other language','trade language','lingua franca','mix languages','switch language','leaders choose','understand all'],
  NI: ['fine as is','no change needed','already using everywhere','every domain','enough access']
};

const state = {
  responses: {},
  saved: {},
  xp: 0,
  badges: new Set(),
  sectionProgress: {},
  tipsIndex: {},
};

// Elements
const questionnaireEl = document.getElementById('questionnaire');
const tipsPanelEl = document.getElementById('tipsPanel');
const badgeContainerEl = document.getElementById('badgeContainer');
const xpValueEl = document.getElementById('xpValue');
const progressRing = document.getElementById('progressRing');
const progressPercent = document.getElementById('progressPercent');
const sectionTitleEl = document.getElementById('sectionTitle');
const sectionProgressEl = document.getElementById('sectionProgress');
const exportBtn = document.getElementById('exportBtn');
const resetBtn = document.getElementById('resetBtn');
const autoAssessBtn = document.getElementById('autoAssessBtn');
const categoryFlagsEl = document.getElementById('categoryFlags');
const useLevelSelect = document.getElementById('useLevelSelect');
const primaryCategorySelect = document.getElementById('primaryCategory');
const finalCodeEl = document.getElementById('finalCode');
const codingNotesEl = document.getElementById('codingNotes');
const printSummaryBtn = document.getElementById('printSummaryBtn');
const badgeCountEl = document.getElementById('badgeCount');

const LS_KEY = 'sir_conversational_survey_v1';

function loadState() {
  try {
    const raw = localStorage.getItem(LS_KEY);
    if (raw) {
      const parsed = JSON.parse(raw);
      Object.assign(state, parsed, {badges: new Set(parsed.badges||[]) });
    }
  } catch(e){ console.warn('Load failed', e); }
}

function saveState() {
  const toSave = {...state, badges:[...state.badges]};
  localStorage.setItem(LS_KEY, JSON.stringify(toSave));
}

function createQuestionCard(sectionId, qObj, index) {
  const tpl = document.getElementById('questionTemplate');
  const node = tpl.content.firstElementChild.cloneNode(true);
  node.dataset.questionId = qObj.id;
  node.querySelector('.question-title').textContent = qObj.q;
  node.querySelector('.question-help').textContent = qObj.help || '';
  node.querySelector('.collapseBtn').addEventListener('click',()=>{
    node.classList.toggle('collapsed');
  });
  const textarea = node.querySelector('textarea');
  const saveBtn = node.querySelector('.saveBtn');
  const wordCount = node.querySelector('.wordCount');
  const badgeHint = node.querySelector('.badgeHint');
  const progressLine = node.querySelector('.progressLine');

  // Restore previous response
  if (state.responses[qObj.id]) {
    textarea.value = state.responses[qObj.id];
    updateWordCount();
    if (state.saved[qObj.id]) {
      node.classList.add('saved');
      progressLine.style.width = '100%';
    }
  }

  textarea.addEventListener('input', ()=> {
    state.responses[qObj.id] = textarea.value;
    updateWordCount();
    autoBadges(qObj.id, textarea.value);
    saveState();
  });
  
  function updateWordCount(){
    const words = textarea.value.trim().split(/\s+/).filter(Boolean);
    wordCount.textContent = words.length + ' words';
    progressLine.style.width = Math.min(100, words.length) + '%';
    if (words.length >= 40 && !state.saved[qObj.id]) {
      badgeHint.classList.remove('opacity-0');
    } else {
      badgeHint.classList.add('opacity-0');
    }
  }

  saveBtn.addEventListener('click', ()=>{
    if (!state.saved[qObj.id]) {
      state.saved[qObj.id] = true;
      awardXP(10);
      node.classList.add('saved');
      badgeHint.classList.add('opacity-0');
      updateProgress();
      saveState();
    }
  });

  return node;
}

function renderSections() {
  sections.forEach(section => {
    const sectionContainer = document.createElement('section');
    sectionContainer.id = 'sec_'+section.id;
    sectionContainer.className = 'space-y-4';
    const header = document.createElement('div');
    header.className = 'flex items-center gap-3';
    header.innerHTML = `<div class="h-10 w-10 rounded-xl bg-gradient-to-br from-brand-300 to-brand-500 flex items-center justify-center text-white font-bold shadow">${section.title[0]}</div>
      <div class="flex-1">
        <h2 class="text-xl font-semibold tracking-tight text-brand-700">${section.title}</h2>
      </div>`;
    sectionContainer.appendChild(header);

    const list = document.createElement('div');
    list.className = 'space-y-5';
    section.questions.forEach((q,i)=> list.appendChild(createQuestionCard(section.id,q,i)) );
    sectionContainer.appendChild(list);
    questionnaireEl.appendChild(sectionContainer);
  });
}

function renderTips(initialSectionId) {
  tipsPanelEl.innerHTML = '';
  const section = sections.find(s=>s.id===initialSectionId) || sections[0];
  section.tips.forEach(t=> addTip(t));
}

function addTip(text) {
  const div = document.createElement('div');
  div.className = 'p-3 rounded-lg bg-white border border-brand-100 shadow-sm text-xs flex gap-2';
  div.innerHTML = `<svg class='w-4 h-4 text-brand-500 shrink-0' fill='none' stroke='currentColor' stroke-width='2' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' d='M12 17v.01M12 7v6m9 5a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z'/></svg><span>${text}</span>`;
  tipsPanelEl.appendChild(div);
}

function updateProgress() {
  const totalQuestions = sections.reduce((sum, s)=> sum + s.questions.length, 0);
  const savedCount = Object.keys(state.saved).length;
  const percent = Math.round((savedCount / totalQuestions) * 100);
  const circumference = 2 * Math.PI * 44; // r=44 from SVG
  progressRing.style.strokeDashoffset = (circumference - (percent/100)*circumference).toFixed(2);
  progressPercent.textContent = percent + '%';
  badgeCountEl.textContent = state.badges.size;
  // Section progress: current scanning could be by viewport - simple approach picks first incomplete section
  const nextSection = sections.find(s => s.questions.some(q=> !state.saved[q.id]));
  if (nextSection) {
    sectionTitleEl.textContent = nextSection.title;
    const totalInSection = nextSection.questions.length;
    const savedInSection = nextSection.questions.filter(q=> state.saved[q.id]).length;
    const frac = (savedInSection / totalInSection) * 100;
    sectionProgressEl.style.width = frac + '%';
  } else {
    sectionTitleEl.textContent = 'All Complete';
    sectionProgressEl.style.width = '100%';
    awardBadge('All Sections Complete');
  }
}

function awardXP(amount){
  state.xp += amount;
  xpValueEl.textContent = state.xp;
  checkXPBadges();
}

function checkXPBadges(){
  if (state.xp >= 50) awardBadge('Story Weaver');
  if (state.xp >= 100) awardBadge('Insight Collector');
  if (state.xp >= 200) awardBadge('Master Interviewer');
}

function awardBadge(label){
  if (state.badges.has(label)) return;
  state.badges.add(label);
  const tpl = document.getElementById('badgeTemplate');
  const node = tpl.content.firstElementChild.cloneNode(true);
  node.classList.add('earned');
  node.querySelector('.badgeLabel').textContent = label;
  badgeContainerEl.appendChild(node);
  saveState();
  updateProgress();
}

function restoreBadges(){
  state.badges.forEach(label=> awardBadge(label));
}

function autoBadges(questionId, text){
  if (text.split(/\s+/).filter(Boolean).length >= 80) awardBadge('Deep Narrative');
  if (/\bking(dom)?\b/i.test(text) && /salvation/i.test(text)) awardBadge('Key Term Capture');
  if (/\b(phone|audio|app)\b/i.test(text)) awardBadge('Media Mapper');
  if (questionId.startsWith('multi_') && /why/i.test(text)) awardBadge('Language Analyst');
}

function buildCategoryFlags(){
  ['T','SE','S','M','NI'].forEach(cat=>{
    const wrapper = document.createElement('label');
    wrapper.className = 'flex items-center gap-2 p-2 rounded-lg border border-brand-200 bg-white/70 text-xs font-medium cursor-pointer hover:shadow';
    wrapper.innerHTML = `<input type='checkbox' data-cat='${cat}' class='h-4 w-4 text-brand-600 focus:ring-brand-500 rounded'/> <span>${cat}</span>`;
    categoryFlagsEl.appendChild(wrapper);
  });
  categoryFlagsEl.addEventListener('change', updateFinalCode);
  useLevelSelect.addEventListener('change', updateFinalCode);
  primaryCategorySelect.addEventListener('change', updateFinalCode);
  codingNotesEl.addEventListener('input', saveState);
}

function updateFinalCode(){
  const useLevel = useLevelSelect.value;
  const primary = primaryCategorySelect.value;
  finalCodeEl.textContent = (useLevel && primary) ? `${useLevel}${primary}` : '--';
  saveState();
}

function autoAssess(){
  const combined = Object.values(state.responses).join('\n').toLowerCase();
  const detected = [];
  Object.entries(categoryKeywords).forEach(([cat, kws])=>{
    if (kws.some(kw=> combined.includes(kw))) detected.push(cat);
  });
  // set checkboxes
  document.querySelectorAll('#categoryFlags input[type=checkbox]').forEach(cb=>{
    cb.checked = detected.includes(cb.dataset.cat);
  });
  // naive use level heuristic
  const usageSignals = (combined.match(/every week|each week|daily|everywhere/g)||[]).length;
  const rareSignals = (combined.match(/rare|hardly|never|cannot recall/g)||[]).length;
  let level = '';
  if (rareSignals>1) level = '1'; else if (usageSignals>=3) level='4'; else if (usageSignals===2) level='3'; else if (usageSignals===1) level='2';
  useLevelSelect.value = level;
  // Choose primary: precedence T > S > SE > M > NI if detected
  const precedence = ['T','S','SE','M','NI'];
  primaryCategorySelect.value = precedence.find(p=> detected.includes(p)) || '';
  updateFinalCode();
}

function exportData(){
  const data = {
    timestamp: new Date().toISOString(),
    responses: state.responses,
    saved: state.saved,
    xp: state.xp,
    badges: [...state.badges],
    code: finalCodeEl.textContent,
    notes: codingNotesEl.value,
    useLevel: useLevelSelect.value,
    primaryCategory: primaryCategorySelect.value
  };
  const blob = new Blob([JSON.stringify(data,null,2)], {type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'sir_conversational_export_'+Date.now()+'.json';
  a.click();
  URL.revokeObjectURL(url);
}

function resetAll(){
  if (!confirm('Reset all data? This cannot be undone.')) return;
  localStorage.removeItem(LS_KEY);
  location.reload();
}

function printableSummary(){
  window.print();
}

// Init
loadState();
renderSections();
renderTips(sections[0].id);
restoreBadges();
updateProgress();
buildCategoryFlags();
updateFinalCode();

// Restore coding state
if (state.useLevel) useLevelSelect.value = state.useLevel;
if (state.primaryCategory) primaryCategorySelect.value = state.primaryCategory;
if (state.codingNotes) codingNotesEl.value = state.codingNotes;

exportBtn.addEventListener('click', exportData);
resetBtn.addEventListener('click', resetAll);
autoAssessBtn.addEventListener('click', autoAssess);
printSummaryBtn.addEventListener('click', printableSummary);

// Accessibility: keyboard shortcuts
window.addEventListener('keydown', e=>{
  if (e.altKey && e.key==='s') { autoAssess(); }
  if (e.altKey && e.key==='e') { exportData(); }
});

// Auto-save coding panel values separately
useLevelSelect.addEventListener('change', ()=> { state.useLevel = useLevelSelect.value; saveState(); });
primaryCategorySelect.addEventListener('change', ()=> { state.primaryCategory = primaryCategorySelect.value; saveState(); });
codingNotesEl.addEventListener('input', ()=> { state.codingNotes = codingNotesEl.value; saveState(); });

console.log('SIR Conversational Survey App Initialized');
