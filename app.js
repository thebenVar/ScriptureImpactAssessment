// SIR Conversational Survey App
// Author: Generated by AI assistant

const sections = [
  {
    id: 'warm',
    title: 'Warm Up & Rapport',
    tips: [
      'Normalize all answers: say “Thank you” not “Good”.',
      'Anchor future language use references (work, gatherings).'
    ],
    questions: [
      { id:'warm_week', q:'Tell me about a normal week for you—work, family, gatherings.', help:'Context & rhythm; note domains and language choices.' },
      { id:'warm_languages', q:'When people in your household talk about important things (health, money, God), what languages do you use?', help:'Early multilingual cues.' }
    ]
  },
  {
    id: 'personal',
    title: 'Personal Scripture Experience',
    tips: [
      'Probe for last concrete instance.',
      'If vague, ask: “Who was there? What happened next?”'
    ],
    questions: [
      { id:'pers_last', q:'Think about the last time you heard or used the Bible in your own language. Tell me the story.', help:'Record time markers and participants.' },
      { id:'pers_gap', q:'If you go many days without hearing or reading it, what usually fills that space instead?', help:'Substitute practices / other language.' },
      { id:'pers_power', q:'A time it felt especially helpful or powerful—what made it so?', help:'Positive value signals.' },
      { id:'pers_skip', q:'A time you had access but chose not to use it—what was going on?', help:'Potential barriers.' }
    ]
  },
  {
    id: 'community',
    title: 'Community & Church Use',
    tips: [
      'Always ground in events respondent attended.',
      'Avoid speculative “others” without story.'
    ],
    questions: [
      { id:'comm_gather', q:'In the church gatherings you attend, what languages show up in different parts? Tell me about last week.', help:'Map functions to languages.' },
      { id:'comm_events', q:'Outside formal services (funerals, weddings, youth), do you hear Scripture in your language? Recent example?', help:'Domain breadth.' },
      { id:'comm_people', q:'Who most often brings out the local language Bible? Who almost never does?', help:'Roles & adoption patterns.' },
      { id:'comm_story', q:'If a visitor asked how common local Scripture use is here, what story would you tell?', help:'Narrative prevalence statement.' }
    ]
  },
  {
    id: 'translation',
    title: 'Translation Experience (T)',
    tips: [
      'Note exact problematic words/phrases.',
      'Capture key term renderings verbatim.'
    ],
    questions: [
      { id:'trans_natural', q:'When you listen to a passage, what parts feel smooth and what parts feel strange? Examples?', help:'Naturalness vs awkwardness.' },
      { id:'trans_comments', q:'Have you heard people complain or joke about the wording? What did they say?', help:'Community attitudes.' },
      { id:'trans_read', q:'(If reading) Describe what happens inside you when you read—where do you slow down?', help:'Processing friction.' },
      { id:'trans_barrier', q:'(If not reading) If you wanted to read it, what would make that hard?', help:'Literacy/orthography barriers.' },
      { id:'trans_retell', q:'[Retell] After hearing a short passage, tell it back in your own words.', help:'Assess comprehension—note omissions.' },
      { id:'trans_terms', q:'What do people say for King / Kingdom / Priest / Prophet / Salvation / Messiah? What does each mean to you?', help:'Key term semantics.' },
      { id:'trans_trust', q:'People sometimes notice who worked on the translation. What kind of people do others say they were?', help:'Trust / acceptance.' }
    ]
  },
  {
    id: 'engagement',
    title: 'Access & Engagement (SE)',
    tips: [
      'Check desire vs logistics.',
      'Differentiate “not interested” from “no way to access”.'
    ],
    questions: [
      { id:'eng_access', q:'If someone today wanted to hear or read Scripture in your language, what could they practically do?', help:'Access pathways.' },
      { id:'eng_forms', q:'Which forms have you actually seen (print, audio, app, video, songs, drama)? Which used most?', help:'Format availability vs use.' },
      { id:'eng_get', q:'Tell me about the last time you saw someone get a copy. Easy or hard?', help:'Acquisition friction.' },
      { id:'eng_obstacles', q:'Are there people who would like it but don’t have it? What gets in the way?', help:'Barriers inventory.' },
      { id:'eng_youth', q:'If a young person wants Bible input, what do they reach for first? Why?', help:'Youth behavior indicator.' },
      { id:'eng_knowledge', q:'Tell me what you know about (choose) Moses / David / Jeremiah / Jonah.', help:'Narrative knowledge level.' },
      { id:'eng_events', q:'Tell me about (choose) Passover / David & Goliath / Daniel & the Lions / Ruth.', help:'Event knowledge.' },
      { id:'eng_help', q:'If you had more of something (teaching, audio, stories, training), what would help people use Scripture more?', help:'Perceived leverage points.' }
    ]
  },
  {
    id: 'spiritual',
    title: 'Spiritual Climate (S)',
    tips: [
      'Listen for affect: curiosity, fear, indifference.',
      'Note social reaction scenarios.'
    ],
    questions: [
      { id:'spir_talk', q:'When people around you talk about knowing God, what feelings do they show? Recent example?', help:'Affective tone.' },
      { id:'spir_react', q:'If a neighbor wanted to follow Jesus more seriously, what reactions would they expect?', help:'Social cost.' },
      { id:'spir_moments', q:'Are there moments when people become more open (crisis, harvest, holidays)? Describe one.', help:'Openness triggers.' },
      { id:'spir_change', q:'Friends who used to be more spiritually hungry—what changed?', help:'Decline factors.' },
      { id:'spir_guidance', q:'If someone new wanted guidance, how quickly could they find someone to walk with them?', help:'Mentor availability.' }
    ]
  },
  {
    id: 'multilingual',
    title: 'Language Choices (M)',
    tips: [
      'Map function -> language -> rationale.',
      'Capture exclusion/inclusion patterns.'
    ],
    questions: [
      { id:'multi_parts', q:'In the last church meeting, list parts and what language each used.', help:'Functional distribution.' },
      { id:'multi_reasons', q:'Why do leaders choose those languages? What reasons do they give?', help:'Rationale depth.' },
      { id:'multi_leftout', q:'When a passage is in another language, who seems left out?', help:'Impact of language choice.' },
      { id:'multi_impact', q:'If leaders wanted more impact among elders / youth / women, which language would help and why?', help:'Strategic alternative.' },
      { id:'multi_proficiency', q:'Do leaders speak your local language well enough to use it naturally? Tell me about one leader.', help:'Leader capability.' },
      { id:'multi_change', q:'Have people discussed changing languages used? What happened?', help:'Change dynamics.' }
    ]
  },
  {
    id: 'wrap',
    title: 'Wrap-Up & Reflection',
    tips: [
      'Prioritize single most impactful change.',
      'Check for “everything fine” narrative.'
    ],
    questions: [
      { id:'wrap_change', q:'If you could change one thing tomorrow to help people use Scripture in your language more, what would it be?', help:'Perceived leverage point.' },
      { id:'wrap_missing', q:'Is there anything important we haven’t talked about?', help:'Uncovered themes.' },
      { id:'wrap_fine', q:'Do some people feel no need for changes? Why might they feel everything is already fine?', help:'NI condition signals.' }
    ]
  }
];

// Dynamic per-question guidance (admonitions)
// type: probe | cue | reminder | watch | note
const questionGuidance = {
  warm_week: [
    { type: 'probe', text: 'If answer is short: Ask about work, family, community gatherings separately.' },
    { type: 'cue', text: 'Listen for weekly rhythm anchors (market day, worship day, farming cycle).' }
  ],
  warm_languages: [
    { type: 'probe', text: 'Clarify domain: health talk vs. prayer vs. money decisions.' },
    { type: 'watch', text: 'Note any language shifts tied to topic seriousness.' }
  ],
  pers_last: [
    { type: 'probe', text: 'Ask: "Who else was present?" if not stated.' },
    { type: 'cue', text: 'Time anchor (this week / last month / harvest season).'},
    { type: 'reminder', text: 'Capture exact vernacular phrases showing emotion or response.' }
  ],
  pers_gap: [
    { type: 'probe', text: 'If they say "nothing": Ask what fills quiet moments (radio, songs, stories).' },
    { type: 'watch', text: 'Distinguish lack of access vs. alternative preference.' }
  ],
  comm_gather: [
    { type: 'cue', text: 'Map each function → language. Record order.' },
    { type: 'watch', text: 'Leaders switching languages mid‑sermon indicates audience adaptation.' }
  ],
  comm_events: [
    { type: 'probe', text: 'Ask for most recent funeral or wedding specifically.' },
    { type: 'reminder', text: 'Events can reveal wider social language vs. church language.' }
  ],
  trans_natural: [
    { type: 'probe', text: 'Request verbatim awkward phrase: "Can you say it as you heard it?"' },
    { type: 'cue', text: 'Tag each example: dialect / register / archaic / literal.' }
  ],
  trans_retell: [
    { type: 'watch', text: 'Missing key theological relationships may indicate comprehension gap.' },
    { type: 'reminder', text: 'Do NOT correct during retell; observe first.' }
  ],
  eng_access: [
    { type: 'probe', text: 'Ask them to walk through steps physically if possible.' },
    { type: 'watch', text: 'Latency: long pause suggests uncertainty / low awareness.' }
  ],
  eng_forms: [
    { type: 'cue', text: 'Separate “seen once” vs. “regularly used”.' }
  ],
  eng_obstacles: [
    { type: 'probe', text: 'For each barrier given, ask: "Who does this affect most?"' },
    { type: 'watch', text: 'Check if barrier is structural (cost) or knowledge (where to obtain).' }
  ],
  spir_react: [
    { type: 'watch', text: 'Note social cost intensity (teasing vs. exclusion vs. danger).' },
    { type: 'cue', text: 'Record direct quotes about reactions.' }
  ],
  multi_reasons: [
    { type: 'probe', text: 'If “understand better” ask: Who specifically struggles in local language?' },
    { type: 'watch', text: 'Unexamined prestige rationale indicates awareness gap.' }
  ],
  wrap_change: [
    { type: 'probe', text: 'If multiple ideas: Ask which one FIRST if they had only one resource.' },
    { type: 'reminder', text: 'Translate this into potential intervention category later.' }
  ]
};

const guidanceTypeMeta = {
  probe: { label: 'Probe', color: 'border-brand-300 bg-brand-50', icon: 'M8 9h8m-8 4h5', stroke:'currentColor' },
  cue: { label: 'Cue', color: 'border-accent-300 bg-accent-100', icon: 'M12 6v6l4 2', stroke:'currentColor' },
  reminder: { label: 'Reminder', color: 'border-brand-400 bg-white', icon: 'M12 8v4m0 4h.01', stroke:'currentColor' },
  watch: { label: 'Watch', color: 'border-amber-300 bg-amber-50', icon: 'M12 12a4 4 0 1 0 0-.01Z', stroke:'currentColor' },
  note: { label: 'Note', color: 'border-slate-300 bg-slate-50', icon: 'M8 7h8v10H8z', stroke:'currentColor' }
};

const state = {
  responses: {},
  saved: {},
  xp: 0,
  badges: new Set(),
  sectionProgress: {},
  tipsIndex: {},
};

// Elements
const questionnaireEl = document.getElementById('questionnaire');
const tipsPanelEl = document.getElementById('tipsPanel');
const badgeContainerEl = document.getElementById('badgeContainer');
const xpValueEl = document.getElementById('xpValue');
const progressRing = document.getElementById('progressRing');
const progressPercent = document.getElementById('progressPercent');
const sectionTitleEl = document.getElementById('sectionTitle');
const sectionProgressEl = document.getElementById('sectionProgress');
const exportBtn = document.getElementById('exportBtn');
const resetBtn = document.getElementById('resetBtn');
const autoAssessBtn = document.getElementById('autoAssessBtn');
const categoryFlagsEl = document.getElementById('categoryFlags');
const useLevelSelect = document.getElementById('useLevelSelect');
const primaryCategorySelect = document.getElementById('primaryCategory');
const finalCodeEl = document.getElementById('finalCode');
const codingNotesEl = document.getElementById('codingNotes');
const printSummaryBtn = document.getElementById('printSummaryBtn');
const badgeCountEl = document.getElementById('badgeCount');

const LS_KEY = 'sir_conversational_survey_v1';

function loadState() {
  try {
    const raw = localStorage.getItem(LS_KEY);
    if (raw) {
      const parsed = JSON.parse(raw);
      Object.assign(state, parsed, {badges: new Set(parsed.badges||[]) });
    }
  } catch(e){ console.warn('Load failed', e); }
}

function saveState() {
  const toSave = {...state, badges:[...state.badges]};
  localStorage.setItem(LS_KEY, JSON.stringify(toSave));
}

function createQuestionCard(sectionId, qObj, index) {
  const tpl = document.getElementById('questionTemplate');
  const node = tpl.content.firstElementChild.cloneNode(true);
  node.dataset.questionId = qObj.id;
  node.querySelector('.question-title').textContent = qObj.q;
  node.querySelector('.question-help').textContent = qObj.help || '';
  node.querySelector('.collapseBtn').addEventListener('click',()=>{
    node.classList.toggle('collapsed');
  });
  const textarea = node.querySelector('textarea');
  const saveBtn = node.querySelector('.saveBtn');
  const wordCount = node.querySelector('.wordCount');
  const badgeHint = node.querySelector('.badgeHint');
  const progressLine = node.querySelector('.progressLine');

  // Restore previous response
  if (state.responses[qObj.id]) {
    textarea.value = state.responses[qObj.id];
    updateWordCount();
    if (state.saved[qObj.id]) {
      node.classList.add('saved');
      textarea.readOnly = true;
      saveBtn.textContent = 'Edit';
      saveBtn.setAttribute('aria-label','Edit answer');
      progressLine.style.width = '100%';
    }
  }

  textarea.addEventListener('input', ()=> {
    // Prevent accidental edits unless editing mode explicitly enabled
    if (node.classList.contains('saved') && !node.classList.contains('editing')) {
      textarea.blur();
      return;
    }
    state.responses[qObj.id] = textarea.value;
    updateWordCount();
    autoBadges(qObj.id, textarea.value);
    saveState();
  });
  
  function updateWordCount(){
    const words = textarea.value.trim().split(/\s+/).filter(Boolean);
    wordCount.textContent = words.length + ' words';
    progressLine.style.width = Math.min(100, words.length) + '%';
    if (words.length >= 40 && !state.saved[qObj.id]) {
      badgeHint.classList.remove('opacity-0');
    } else {
      badgeHint.classList.add('opacity-0');
    }
  }

  saveBtn.addEventListener('click', ()=>{
    // First time save
    if (!state.saved[qObj.id]) {
      state.saved[qObj.id] = true;
      awardXP(10);
      node.classList.add('saved');
      textarea.readOnly = true;
      saveBtn.textContent = 'Edit';
      saveBtn.setAttribute('aria-label','Edit answer');
      badgeHint.classList.add('opacity-0');
      updateProgress();
      saveState();
      return;
    }
    // If already saved and not currently editing -> enter edit mode
    if (state.saved[qObj.id] && !node.classList.contains('editing')) {
      node.classList.add('editing');
      textarea.readOnly = false;
      saveBtn.textContent = 'Save';
      saveBtn.setAttribute('aria-label','Save updated answer');
      // Focus at end
      textarea.focus();
      textarea.selectionStart = textarea.selectionEnd = textarea.value.length;
      return;
    }
    // If in editing mode -> save updates
    if (node.classList.contains('editing')) {
      state.responses[qObj.id] = textarea.value;
      textarea.readOnly = true;
      node.classList.remove('editing');
      saveBtn.textContent = 'Edit';
      saveBtn.setAttribute('aria-label','Edit answer');
      saveState();
      return;
    }
  });

  // Add focus/click listeners for dynamic guidance
  const activateGuidance = () => updateLiveGuidance(qObj.id);
  node.addEventListener('click', activateGuidance);
  textarea.addEventListener('focus', activateGuidance);

  return node;
}

function renderSections() {
  sections.forEach(section => {
    const sectionContainer = document.createElement('section');
    sectionContainer.id = 'sec_'+section.id;
    sectionContainer.className = 'space-y-4';
    const header = document.createElement('div');
    header.className = 'flex items-center gap-3';
    header.innerHTML = `<div class="h-10 w-10 rounded-xl bg-gradient-to-br from-brand-300 to-brand-500 flex items-center justify-center text-white font-bold shadow">${section.title[0]}</div>
      <div class="flex-1">
        <h2 class="text-xl font-semibold tracking-tight text-brand-700">${section.title}</h2>
      </div>`;
    sectionContainer.appendChild(header);

    const list = document.createElement('div');
    list.className = 'space-y-5';
    section.questions.forEach((q,i)=> list.appendChild(createQuestionCard(section.id,q,i)) );
    sectionContainer.appendChild(list);
    questionnaireEl.appendChild(sectionContainer);
  });
}

function renderTips(initialSectionId) {
  // Legacy no-op (dynamic guidance replaces static tips)
}

function buildAdmonition(item){
  const meta = guidanceTypeMeta[item.type] || guidanceTypeMeta.note;
  const div = document.createElement('div');
  div.className = `admonition relative p-3 pl-3.5 rounded-lg border text-xs flex gap-2 items-start ${meta.color}`;
  div.innerHTML = `<div class='mt-0.5 text-brand-600'><svg class='w-4 h-4' fill='none' stroke='${meta.stroke}' stroke-width='2' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' d='${meta.icon}'/></svg></div><div class='flex-1 leading-relaxed'><span class='font-semibold mr-1 uppercase tracking-wide text-[10px] opacity-70'>${meta.label}:</span>${item.text}</div>`;
  return div;
}

function updateLiveGuidance(questionId){
  if (!tipsPanelEl) return;
  tipsPanelEl.innerHTML = '';
  const guidance = questionGuidance[questionId] || [];
  if (guidance.length === 0) {
    const empty = document.createElement('div');
    empty.className = 'text-[11px] text-slate-500 italic';
    empty.textContent = 'No specific guidance for this question. Use core interviewing principles.';
    tipsPanelEl.appendChild(empty);
  } else {
    guidance.forEach(g => tipsPanelEl.appendChild(buildAdmonition(g)));
  }
  // Append collapsible section tips
  const section = sections.find(sec => sec.questions.some(q=> q.id === questionId));
  if (section) {
    const wrapper = document.createElement('div');
    wrapper.className = 'mt-3 space-y-2';
    const header = document.createElement('button');
    header.type = 'button';
    header.className = 'w-full flex items-center justify-between text-[11px] font-semibold tracking-wide text-brand-700 bg-white/70 px-2 py-1 rounded border border-brand-100 hover:bg-white transition';
    header.innerHTML = `<span>Section Tips: ${section.title}</span><span class='toggle ml-2 text-slate-400 transition-transform'>&#9662;</span>`;
    const list = document.createElement('div');
    list.className = 'mt-2 space-y-2';
    section.tips.forEach(t=> list.appendChild(buildAdmonition({type:'note', text:t})) );
    header.addEventListener('click', ()=>{
      list.classList.toggle('hidden');
      header.querySelector('.toggle').classList.toggle('rotate-180');
    });
    wrapper.appendChild(header);
    wrapper.appendChild(list);
    tipsPanelEl.appendChild(wrapper);
  }
}

// Init
loadState();
renderSections();
restoreBadges();
updateProgress();
buildCategoryFlags();
updateFinalCode();
if (sections[0]?.questions[0]) updateLiveGuidance(sections[0].questions[0].id);

// Restore coding state
if (state.useLevel) useLevelSelect.value = state.useLevel;
if (state.primaryCategory) primaryCategorySelect.value = state.primaryCategory;
if (state.codingNotes) codingNotesEl.value = state.codingNotes;

exportBtn.addEventListener('click', exportData);
resetBtn.addEventListener('click', resetAll);
autoAssessBtn.addEventListener('click', autoAssess);
printSummaryBtn.addEventListener('click', printableSummary);

// Accessibility: keyboard shortcuts
window.addEventListener('keydown', e=>{
  if (e.altKey && e.key==='s') { autoAssess(); }
  if (e.altKey && e.key==='e') { exportData(); }
});

// Auto-save coding panel values separately
useLevelSelect.addEventListener('change', ()=> { state.useLevel = useLevelSelect.value; saveState(); });
primaryCategorySelect.addEventListener('change', ()=> { state.primaryCategory = primaryCategorySelect.value; saveState(); });
codingNotesEl.addEventListener('input', ()=> { state.codingNotes = codingNotesEl.value; saveState(); });

console.log('SIR Conversational Survey App Initialized');
